{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "00aaaf25",
   "metadata": {},
   "source": [
    "# 02: Namespace, modules, packages, and objects\n",
    "\n",
    "There are a variety of ways to import existing code into a Python script or interactive session.\n",
    "\n",
    "There is alot of flexibility in how this is done, but a few suggested practices will be covered here."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "b263fdce",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The Zen of Python, by Tim Peters\n",
      "\n",
      "Beautiful is better than ugly.\n",
      "Explicit is better than implicit.\n",
      "Simple is better than complex.\n",
      "Complex is better than complicated.\n",
      "Flat is better than nested.\n",
      "Sparse is better than dense.\n",
      "Readability counts.\n",
      "Special cases aren't special enough to break the rules.\n",
      "Although practicality beats purity.\n",
      "Errors should never pass silently.\n",
      "Unless explicitly silenced.\n",
      "In the face of ambiguity, refuse the temptation to guess.\n",
      "There should be one-- and preferably only one --obvious way to do it.\n",
      "Although that way may not be obvious at first unless you're Dutch.\n",
      "Now is better than never.\n",
      "Although never is often better than *right* now.\n",
      "If the implementation is hard to explain, it's a bad idea.\n",
      "If the implementation is easy to explain, it may be a good idea.\n",
      "Namespaces are one honking great idea -- let's do more of those!\n"
     ]
    }
   ],
   "source": [
    "import this"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "79cf8e16",
   "metadata": {},
   "source": [
    "In the above Easter Egg, we can learn a couple things. First, the end line highlights that namespaces are important!\n",
    "\n",
    "Also, by importing `this`, it actually executed some code (printing out the Zen of Python). This means Python knew where to find a module called `this` and executed it upon import."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ccff90ef",
   "metadata": {},
   "source": [
    "## Namespaces\n",
    "There's a nice explanation of namespaces [here](https://realpython.com/python-namespaces-scope/). \n",
    "\n",
    "First, we need to understand what is a _name_ in Python. A name is a general container referencing something. Like in many languages, think of a variable:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "90945336",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a=5\n",
    "a"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "303ca9bd",
   "metadata": {},
   "source": [
    "In python, we can also use a name for a function."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "1235392a",
   "metadata": {},
   "outputs": [],
   "source": [
    "def funky(description):\n",
    "    print (f'this {description} function is funky!')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "d40930d3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<function __main__.funky(description)>"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "funky"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "6b77b909",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "this Town function is funky!\n"
     ]
    }
   ],
   "source": [
    "funky('Town')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "883515a7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<function __main__.funky(description)>"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "f = funky\n",
    "f"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "289e645b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "this Skunk function is funky!\n"
     ]
    }
   ],
   "source": [
    "f(\"Skunk\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "32d73241",
   "metadata": {},
   "source": [
    "So, we assigned f to, in a sense, point to the function `funky`.\n",
    "\n",
    "Names (and therefore variables) can assume various types and get reused without definition."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "fe256808",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5\n",
      "[12.3, 44.9]\n",
      "stuff in quotes\n"
     ]
    }
   ],
   "source": [
    "a=5\n",
    "print (a)\n",
    "a = [12.3, 44.9]\n",
    "print (a)\n",
    "a = 'stuff in quotes'\n",
    "print (a)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f52a98da",
   "metadata": {},
   "source": [
    "So, namespace is just a space containing all the names in use during a Python session. \n",
    "\n",
    "__An important caution with names:__\n",
    "\n",
    "Since you can think of a name of a variable as a tag, there is a special behavior related to lists that can cause massive grief!\n",
    "\n",
    "First, what happens when a single value is associated with a name (like a variable)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "4968e004",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "a=5, b=5\n",
      "a=5, b=6\n"
     ]
    }
   ],
   "source": [
    "a = 5\n",
    "b = a\n",
    "print(f\"{a=}, {b=}\")\n",
    "b = 6\n",
    "print(f\"{a=}, {b=}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ae30acc6",
   "metadata": {},
   "source": [
    "Now what happens when we have a list and change an element in `b`..."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "ed6fe608",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "a=[1.0, 2.0, 3.5, 4.9]\n",
      "b=[1.0, 2.0, 3.5, 4.9]\n",
      "_______________\n",
      "a=[1.0, 2.0, 999, 4.9]\n",
      "b=[1.0, 2.0, 999, 4.9]\n"
     ]
    }
   ],
   "source": [
    "a=[1.0, 2.0, 3.5, 4.9]\n",
    "print (f'{a=}')\n",
    "b=a\n",
    "print (f'{b=}')\n",
    "print ('_'*15)\n",
    "b[2]=999\n",
    "print (f'{a=}')\n",
    "print (f'{b=}')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8ba28715",
   "metadata": {},
   "source": [
    "*Oh no! Changing `b` also changed `a`!* \n",
    "\n",
    "The reason for this is that `a` and `b` are both pointing to the same memory location that's storing the information (in this case, starting with the list `[1.0, 2.0, 3.5, 4.9]` and later becoming the list `[1.0, 2.0, 999, 4.9]`). This same behavior happens when using `numpy` arrays.\n",
    "\n",
    "The way around this is to make a full copy of the information (by value rather than by reference). In typical Python, this means importing a module called `copy` and using either the function `copy.copy` or `copy.deepcopy`. In `numpy`, copy is built-in."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "116318ed",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 2, 3]\n",
      "[1, 2, 99]\n"
     ]
    }
   ],
   "source": [
    "import copy\n",
    "a = [1,2,3]\n",
    "b = copy.copy(a)\n",
    "b[2] = 99\n",
    "print (a)\n",
    "print (b)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "08643fe3",
   "metadata": {},
   "source": [
    "### Namespaces: Global to Local\n",
    "\n",
    "Python contains four common namespaces. We are going to investigate the behaviour of three of these:\n",
    "\n",
    "**The global namespace** contains all variables that defined in the \"main\" level of the program  \n",
    "**The enclosing namespace** contains variables that are accessible to a function/method and are also accessible to any methods defined inside this namespace  \n",
    "**The local namespace** contains variables that are only accessible to the method that they are defined in"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "eb864332",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "global\n",
      "enclosing\n",
      "local\n",
      "enclosing\n",
      "global\n"
     ]
    }
   ],
   "source": [
    "x = \"global\"\n",
    "\n",
    "def f():\n",
    "    x = \"enclosing\"\n",
    "    print(x)\n",
    "    \n",
    "    def g():\n",
    "        x = \"local\"\n",
    "        print(x)\n",
    "        \n",
    "    g()\n",
    "    print(x)\n",
    "\n",
    "print(x)\n",
    "f()\n",
    "print(x)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aa14d499",
   "metadata": {},
   "source": [
    "Now remove `x = \"enclosing\"` and/or `x = \"local\"` and run the code. What's happening here?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "d7fb1a05",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "global\n",
      "global\n",
      "local\n",
      "global\n",
      "global\n"
     ]
    }
   ],
   "source": [
    "x = \"global\"\n",
    "\n",
    "def f():\n",
    "    print(x)\n",
    "    \n",
    "    def g():\n",
    "        x = \"local\"\n",
    "        print(x)\n",
    "        \n",
    "    g()\n",
    "    print(x)\n",
    "\n",
    "print(x)\n",
    "f()\n",
    "print(x)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c158e55b",
   "metadata": {},
   "source": [
    "## Objects\n",
    "\n",
    "Python supports object-oriented programming. This is, in fact, *awesome*! It can, however, be confusing at first. Let's break it down...\n",
    "\n",
    "Staring with a few definitions. First of all, basically everything in Python is an object. You can think of the word \"object\" to mean \"thing\". Any of these things--or objects--can have both `attributes` and `methods`. \n",
    "\n",
    "**Attributes** are just data associated with (or stored by) an object\n",
    "\n",
    "**Methods** are functions that do something with that data (or with other data).\n",
    "\n",
    "**Properties** are special functions that do something with data, but behave like attributes.\n",
    "\n",
    "A **class** is a set of definitions for the data structure and methods of an object. You can think of this like a blueprint.\n",
    "\n",
    "An **instance** is an object using the definitions of a class. You can think of this as a building made from the blueprint.\n",
    "\n",
    "Let's try out some examples."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "4804faa0",
   "metadata": {},
   "outputs": [],
   "source": [
    "def hola():\n",
    "    print(\"hello world\")\n",
    "    return 42, \"african or european?\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "bf5e893c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<function __main__.hola()>"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hola"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "52e2160c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "hello world\n"
     ]
    }
   ],
   "source": [
    "meaning_of_life, sparrow_velocity = hola()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "6a79bd58",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "meaning_of_life=42, sparrow_velocity='african or european?'\n"
     ]
    }
   ],
   "source": [
    "print(f\"{meaning_of_life=}, {sparrow_velocity=}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "857a77e9",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "0695b1e5",
   "metadata": {},
   "outputs": [],
   "source": [
    "class Person:\n",
    "    def __init__(self, input_name, input_fav):\n",
    "        self.name = input_name\n",
    "        self.fav = input_fav\n",
    "    \n",
    "    def introduce_yourself(self):\n",
    "        print (f\"Hi, I'm {self.name}. I like {self.fav}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "11060bf3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "__main__.Person"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Person"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "f0a43ea0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Fredrick'"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Fred = Person('Fredrick', 'beer')\n",
    "Fred.name"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "26d2d689",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<__main__.Person at 0x1106c4b50>"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Fred"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "4f2cf35a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hi, I'm Fredrick. I like beer\n"
     ]
    }
   ],
   "source": [
    "Fred.introduce_yourself()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ee722b9d",
   "metadata": {},
   "source": [
    "### A More Useful Class*\n",
    "\\*marginally more useful"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "dda9b64e",
   "metadata": {},
   "outputs": [],
   "source": [
    "class Rectangle(object):\n",
    "    \"\"\"\n",
    "    this is a doc string\n",
    "    \"\"\"\n",
    "    #this is just a comment\n",
    "    def __init__(self, x, y, ID):\n",
    "        self.length = x\n",
    "        self.width = y\n",
    "        self.ID = ID"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "fb6cf5b1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class '__main__.Rectangle'>\n"
     ]
    }
   ],
   "source": [
    "print(Rectangle)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "abbbfdf3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2\n",
      "f\n"
     ]
    }
   ],
   "source": [
    "r1 = Rectangle(2,3,'f')\n",
    "print(r1.length)\n",
    "print(r1.ID)\n",
    "r2 = Rectangle(5,5,'dd')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "56464299",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "r2.length"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "581f57ef",
   "metadata": {},
   "outputs": [],
   "source": [
    "all_my_rectangles = [r1,r2]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "54dabfbf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "all_my_rectangles[0].length"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "fc69e2b8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "f\n",
      "dd\n"
     ]
    }
   ],
   "source": [
    "for rect in all_my_rectangles:\n",
    "    print(rect.ID)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "78ac67c9",
   "metadata": {},
   "source": [
    "Here, we've set up a class from which we can create instances later. Note that the syntax looks like a function. There are a couple strange things that deserve an explanation.\n",
    "\n",
    "* The argument `object` is optional and has to do with inheritence (which will only be briefly introduced in this class). \n",
    "* It is common to include at least one method\n",
    "* `__init__` is a special operator that initializes the class. \n",
    "* The first argument of `__init__` and really any method of a class is `self`.\n",
    "\n",
    "### More about `self`\n",
    "`self` is the instance of the class that is being operated on. One could use a different name, but it is convention (deeply seated!!) to use `self`. A nice explanation is found on [Stack Overflow](http://stackoverflow.com/questions/2709821/python-self-explained) and Guido van Rossum wrote an essay on [why explicit self can't go away](http://neopythonic.blogspot.com/2008/10/why-explicit-self-has-to-stay.html). \n",
    "\n",
    "Here's one more explanation of the use and need for `self` [self history](https://docs.python.org/2/faq/design.html#why-must-self-be-used-explicitly-in-method-definitions-and-calls).\n",
    "\n",
    "Basically, it comes down to `Explicit is better then implicit`. We want to know explicitly that we are working on an a property of the object we are defining rather than some other function or variable that might be globally defined.\n",
    "\n",
    "Now let's make an instance and try all this out."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "3fae4530",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'length': 25, 'width': 35, 'ID': 'rectangle one'}"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "big_rectangle = Rectangle(25, 35, 'rectangle one')\n",
    "big_rectangle\n",
    "vars(big_rectangle)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "46662487",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "25"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "big_rectangle.length"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "13c4b2a4",
   "metadata": {},
   "source": [
    "We see now that we've made an instance and it is of the type `rectangle`. We can check out the attributes using a dot (`.`)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "673e0f63",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "35\n",
      "25\n",
      "rectangle one\n"
     ]
    }
   ],
   "source": [
    "print(big_rectangle.width)\n",
    "print(big_rectangle.length)\n",
    "print(big_rectangle.ID)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bb716015",
   "metadata": {},
   "source": [
    "We can use this set of attributes as a kind of database.\n",
    "\n",
    "### Questions\n",
    "\n",
    "How could we make a group of rectangles of varying lengths and widths?\n",
    "   - We could make each attribute a list.\n",
    "   - We could make a list of instances with a member for each rectangle."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "4a47da72",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<__main__.Rectangle object at 0x111a111d0>\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "44"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "myrectangles = Rectangle([25, 78], [44, 42], ['r1', 'r2'])\n",
    "print(myrectangles)\n",
    "myrectangles.width[0]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "db1bc601",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<__main__.Rectangle at 0x111a1b050>, <__main__.Rectangle at 0x111a1afd0>]"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "myrectangles_better = list()\n",
    "myrectangles_better.append(Rectangle(25, 44, 'r1'))\n",
    "myrectangles_better.append(Rectangle(78, 42, 'r2'))\n",
    "myrectangles_better"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "a75ec4c9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "78"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "myrectangles_better[1].length"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bc26bfe9",
   "metadata": {},
   "source": [
    "### Test your skills\n",
    "Could we do this is a dictionary rather than a list?"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0bc550f2",
   "metadata": {},
   "source": [
    "keys ---> 'R1'   'R2'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "2df1831a",
   "metadata": {},
   "outputs": [],
   "source": [
    "d = dict()\n",
    "d[\"R1\"] = Rectangle(3, 4, 'rect1')\n",
    "d[\"R2\"] = Rectangle(5, 99, \"rect2\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "b4999719",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "d[\"R1\"].length"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "4a7f7976",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "99"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "d[\"R2\"].width"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b9e3364d",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "e299d240",
   "metadata": {},
   "source": [
    "There are advantages to both approaches. It would also be possible to define each attribute as a list or dictionary and make a single class. This is a bit more cumbersome, though, and part of the flexibility of dynamic lists and dictionaries is the ability to define multiple objects within them on the fly."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "51cd75d2",
   "metadata": {},
   "source": [
    "## Methods\n",
    "\n",
    "Now say we want to operate on these data, like to calculate the area of each rectangle."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8b6e75f7",
   "metadata": {},
   "source": [
    "### Test your skills\n",
    "In the blank code block below, calculate the areas for each rectangle using a loop."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "511f027a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "12\n",
      "495\n"
     ]
    }
   ],
   "source": [
    "for k, val in d.items():\n",
    "    area = val.length * val.width\n",
    "    print(area)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1923f4e0",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1590a5dd",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "d2cdfcb4",
   "metadata": {},
   "source": [
    "Is there a more efficient way do this if we know, for example, that area will be of interest?\n",
    "\n",
    "We can create a method at definition of the class that uses the attributes of `length` and `width` to derive area if called and store it as an additional attribute."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "f2d88128",
   "metadata": {},
   "outputs": [],
   "source": [
    "class Rectangle(object):\n",
    "    def __init__(self, x, y, ID):\n",
    "        self.length = x\n",
    "        self.width = y\n",
    "        self.ID = ID\n",
    "    \n",
    "    def calc_area(self):\n",
    "        # we only pass self because there are no additional attributes of concern\n",
    "        self.area = self.length * self.width"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "19f66a7e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'length': 3, 'width': 4, 'ID': 'this'}"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rr = Rectangle(3,4,'this')\n",
    "vars(rr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "acb86940",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'length': 3, 'width': 4, 'ID': 'this', 'area': 12}"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rr.calc_area()\n",
    "rr.__dict__"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e14d6800",
   "metadata": {},
   "source": [
    "Let's make our list of `rectangle` objects again, but use a method to calculate the areas."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "25909c1e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'length': 35, 'width': 25, 'ID': 'rectangle one'}"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "all_rectangles = list()\n",
    "all_rectangles.append(Rectangle(35,25,'rectangle one'))\n",
    "all_rectangles.append(Rectangle(150, 1000, 'big dog'))\n",
    "vars(all_rectangles[0])\n",
    "all_rectangles[0].__dict__"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "b556938d",
   "metadata": {},
   "outputs": [],
   "source": [
    "for csqr in all_rectangles:\n",
    "    csqr.calc_area()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "e1e8adf7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "rectangle one area=875\n",
      "big dog area=150000\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "{'length': 35, 'width': 25, 'ID': 'rectangle one', 'area': 875}"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# let's loop over again to show the area\n",
    "for csqr in all_rectangles:\n",
    "    print(f\"{csqr.ID} area={csqr.area}\")\n",
    "vars(all_rectangles[0])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cf11d87b",
   "metadata": {},
   "source": [
    "We could even incorporate calculations into the `__init__` constructor so the area is calculated on instantiation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "5a084e14",
   "metadata": {},
   "outputs": [],
   "source": [
    "class Rectangle(object):\n",
    "    def __init__(self, x, y, ID):\n",
    "        self.length = x\n",
    "        self.width = y\n",
    "        self.area = x*y\n",
    "        self.ID = ID"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "9dac1b6a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'length': 4, 'width': 5, 'area': 20, 'ID': 'bummer'}"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rr = Rectangle(4,5,'bummer')\n",
    "rr.__dict__"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "e87976ad",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'length': 100, 'width': 5, 'area': 20, 'ID': 'bummer'}"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rr.length = 100\n",
    "rr.__dict__"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c746c5e4",
   "metadata": {},
   "source": [
    "Uh oh! Length changes but the overall area of the rectangle doesn't\n",
    "\n",
    "### Properties to the rescue!!!\n",
    "\n",
    "Properties are a special method that behaves similar to an attribute. These methods allow for on the fly (\"dynamic\") calculations and variable construction among other things. \n",
    "\n",
    "Properties are defined with a special decorator (`@property`). Decorators are an advanced topic and won't be covered in this course. More information about decorators, how they are used, and how they work can be found [here](https://betterprogramming.pub/decorators-in-python-72a1d578eac4).\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "e0817eca",
   "metadata": {},
   "outputs": [],
   "source": [
    "class Rectangle(object):\n",
    "    def __init__(self, x, y, ID):\n",
    "        self.length = x\n",
    "        self.width = y\n",
    "        self.ID = ID\n",
    "        \n",
    "    @property\n",
    "    def area(self):\n",
    "        return self.length * self.width"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "6a784c63",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'length': 5, 'width': 9, 'ID': 'awesome rectangle'}\n",
      "45\n"
     ]
    }
   ],
   "source": [
    "rect = Rectangle(5, 9, \"awesome rectangle\")\n",
    "print(rect.__dict__)\n",
    "print(rect.area)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5cceaada",
   "metadata": {},
   "source": [
    "what happens if the length of the rectangle grows?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "bda89c8e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ID=awesome rectangle, length=5, width=9, area=45\n",
      "ID=awesome rectangle, length=16, width=9, area=144\n",
      "ID=awesome rectangle, length=27, width=9, area=243\n",
      "ID=awesome rectangle, length=38, width=9, area=342\n",
      "ID=awesome rectangle, length=49, width=9, area=441\n",
      "ID=awesome rectangle, length=60, width=9, area=540\n",
      "ID=awesome rectangle, length=71, width=9, area=639\n",
      "ID=awesome rectangle, length=82, width=9, area=738\n",
      "ID=awesome rectangle, length=93, width=9, area=837\n"
     ]
    }
   ],
   "source": [
    "for new_length in range(5, 100, 11):\n",
    "    rect.length = new_length\n",
    "    print(f\"ID={rect.ID}, length={rect.length}, width={rect.width}, area={rect.area}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "863db73c",
   "metadata": {},
   "source": [
    "### Test your skills!!!\n",
    "\n",
    "build a `Rectangle` class that includes an `area` and `perimiter_length` property method.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "c8b0994e",
   "metadata": {},
   "outputs": [],
   "source": [
    "class Rectangle(object):\n",
    "    def __init__(self, x, y, ID):\n",
    "        self.length = x\n",
    "        self.width = y\n",
    "        self.ID = ID\n",
    "        \n",
    "    @property\n",
    "    def area(self):\n",
    "        return self.length * self.width\n",
    "    \n",
    "    @property\n",
    "    def perimeter(self):\n",
    "        return 2 * (self.length + self.width)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "6c9ca452",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "22"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "r = Rectangle(5, 6, \"f\")\n",
    "r.perimeter"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c808fb3a",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "cd6ab207",
   "metadata": {},
   "source": [
    "## Operator and Special Method Overloading*\n",
    "\n",
    "One special thing we can do is overload operators. This means we can customize the behavior that an object (as an instance of a class) will exhibit when called. The `__init__` constructor was an example of this which we have done something similar already. When an instance is made from a class, whatever is defined in `__init__` is performed as part of creating the instance which is effectively _overloading_ the special method `__init__`.\n",
    "\n",
    "Another really common example is `__str__`. This function provides a string for Python to display when `print` of `str` is called on an object.\n",
    "\n",
    "Looking at the example of `rectangle` objects we used above. \n",
    "\n",
    "\\*N.B. --> The concept of `overloading` is different in Python than in FORTRAN. Also, there appears to be a lack of precision about the use of the terms `overload` and `override`. I'm using the terminology from the _O' Reilly_ book here, but note that you might find other people using `override` instead. The concept in this case is the same."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "c509dd88",
   "metadata": {},
   "outputs": [],
   "source": [
    "class Rectangle(object):\n",
    "    def __init__(self, x, y, ID):\n",
    "        self.length = x\n",
    "        self.width = y\n",
    "        self.ID = ID\n",
    "        \n",
    "    @property\n",
    "    def area(self):\n",
    "        return self.length * self.width\n",
    "    \n",
    "    def __str__(self):\n",
    "        return f\"I'm a Rectangle and my name is {self.ID}, \" \\\n",
    "            f\"length={self.length}, width={self.width}, area={self.area}\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "b605e6ab",
   "metadata": {},
   "outputs": [],
   "source": [
    "rect = Rectangle(3, 4, 'super_awesome_rectangle')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "1f6897a1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<__main__.Rectangle at 0x111a3f990>"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rect"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "e5bfa9aa",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "I'm a Rectangle and my name is super_awesome_rectangle, length=3, width=4, area=12\n"
     ]
    }
   ],
   "source": [
    "print(rect)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4a399ca3",
   "metadata": {},
   "source": [
    "Notice that this prints out a default string telling us the `rectangle` is an object in this code (e.g. under `__main__`). But, we can _overload_ and provide a more useful return string using `__repr__`. This serves the same purpose as `__str__` but also returns the string in other circumstances.\n",
    "\n",
    "What's the difference between `__repr__` and `__str__`? The Diet Mountain Dew crew has discussed this [here](http://stackoverflow.com/questions/1436703/difference-between-str-and-repr-in-python)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "d990d460",
   "metadata": {},
   "outputs": [],
   "source": [
    "class Rectangle(object):\n",
    "    def __init__(self, x, y, ID):\n",
    "        self.length = x\n",
    "        self.width = y\n",
    "        self.ID = ID\n",
    "        \n",
    "    @property\n",
    "    def area(self):\n",
    "        return self.length * self.width\n",
    "    \n",
    "    def __repr__(self):\n",
    "        return f\"I'm a Rectangle and my name is {self.ID}, \" \\\n",
    "            f\"length={self.length}, width={self.width}, area={self.area}\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "739ab614",
   "metadata": {},
   "outputs": [],
   "source": [
    "rect = Rectangle(3, 4, 'super_awesome_rectangle')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "4395cbc9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "I'm a Rectangle and my name is super_awesome_rectangle, length=3, width=4, area=12"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rect"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "18770648",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "I'm a Rectangle and my name is super_awesome_rectangle, length=3, width=4, area=12\n"
     ]
    }
   ],
   "source": [
    " print(rect)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f5157b04",
   "metadata": {},
   "source": [
    "We can even overload other operators like `__add__` which will control what happens when this object is added to another.\n",
    "\n",
    "A complete list of which special methods and operators can be overloaded is found [here](https://docs.python.org/3.9/reference/datamodel.html#special-method-names)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "faee0ac8",
   "metadata": {},
   "outputs": [],
   "source": [
    "class Rectangle(object):\n",
    "    def __init__(self, x, y, ID):\n",
    "        self.length = x\n",
    "        self.width = y\n",
    "        self.ID = ID\n",
    "        \n",
    "    @property\n",
    "    def area(self):\n",
    "        return self.length * self.width\n",
    "    \n",
    "    def __add__(self, other):\n",
    "        print(\"what should we add today???\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "4dd29c4c",
   "metadata": {},
   "outputs": [],
   "source": [
    "r1 = Rectangle(1, 1, \"Small rect\")\n",
    "r2 = Rectangle(3, 4, \"bigger one\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "9b2287c2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "what should we add today???\n"
     ]
    }
   ],
   "source": [
    "r1 + r2"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "99cda1ee",
   "metadata": {},
   "source": [
    "### Test your skills -- overload `__add__` so that adding two rectangles adds their area\n",
    "\n",
    "Start with the definition we just made. HINT: you will need to represent the other object with `other`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "e66649f1",
   "metadata": {},
   "outputs": [],
   "source": [
    "class Rectangle(object):\n",
    "    def __init__(self, x, y, ID):\n",
    "        self.length = x\n",
    "        self.width = y\n",
    "        self.ID = ID\n",
    "        \n",
    "    @property\n",
    "    def area(self):\n",
    "        return self.length * self.width\n",
    "    \n",
    "    def __add__(self, other):\n",
    "        print(self.add + other.add)\n",
    "        return self.add + other.add"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7d28debd",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fa85c7cb",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "0c9b932a",
   "metadata": {},
   "source": [
    "Operator overloading is very powerful, but with great power comes great responsibility. Use with caution."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d043f1c5",
   "metadata": {},
   "source": [
    "## Object-oriented programming (OOP)\n",
    "\n",
    "In the O'Reilly book _Learning Python, 5th Edition_ is a great discussion about Object-Oriented Programming. The author makes ths distinction that much of what we are doing with Python is _object-based_ but to truly be object-oriented, we need to also use something called inheritence."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "26ee23fd",
   "metadata": {},
   "source": [
    "## Inheritence\n",
    "Let's revisit our class for rectangles without the overloading of `__add__`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "4e0a08b5",
   "metadata": {},
   "outputs": [],
   "source": [
    "class Rectangle(object):\n",
    "    def __init__(self, x, y, ID):\n",
    "        self.length = x\n",
    "        self.width = y\n",
    "        self.ID = ID\n",
    "        self._type = \"Rectangle\"\n",
    "        \n",
    "    @property\n",
    "    def area(self):\n",
    "        return self.length * self.width\n",
    "    \n",
    "    def __repr__(self):\n",
    "        return f\"I'm a {self._type} and my name is {self.ID}, \" \\\n",
    "            f\"length={self.length}, width={self.width}, area={self.area}\"\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3176c420",
   "metadata": {},
   "source": [
    "We can _inherit_ these characteristics (the methods and properties) in a new kind of class that has a custom bit of functionality. Say we would like to create a second class that is specifically for representing squares.\n",
    "\n",
    "We can redefine a new class _inheriting_ the rectangle attributes and methods. We can even add the new functionality on top of it.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "88f1aecd",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Rectangle is the parent class\n",
    "class Square(Rectangle):\n",
    "    \"\"\"\n",
    "    Doc strings for Square\n",
    "    \"\"\"\n",
    "    def __init__(self, x, ID):\n",
    "        # initialize the parent class using the super().__init__ call\n",
    "        super().__init__(x, x, ID)\n",
    "        self._type = \"Square\"\n",
    "        \n",
    "    @property\n",
    "    def perimiter(self):\n",
    "        return 2 * (self.length + self.width)\n",
    "    \n",
    "    def __repr__(self):\n",
    "        # get the __repr__ from Rectangle using super()\n",
    "        s = super().__repr__()\n",
    "        s += f\", perimiter={self.perimiter}\"\n",
    "        return s"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "06b6c621",
   "metadata": {},
   "outputs": [],
   "source": [
    "# live code example\n",
    "rect = Rectangle(2, 4, \"Tony\")\n",
    "square = Square(5, \"Ravioli\") "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "c9b5763f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "I'm a Rectangle and my name is Tony, length=2, width=4, area=8"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rect"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "e1cedb0d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "I'm a Square and my name is Ravioli, length=5, width=5, area=25, perimiter=20"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "square"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b0f95e24",
   "metadata": {},
   "source": [
    "## Modules, Packages, and the Standard Python Library\n",
    "\n",
    "The [Standard Python Library](https://docs.python.org/3/library/) is the set of functions that are part of Python by default.\n",
    "\n",
    "More technically, names point to \"objects\". a \"module\" is a file (with extension `.py`) that contains python code. If there are functions in that code, they can be accessed using the name of the module and a dot (`.`). \n",
    "\n",
    "Packages are collections of modules and are often \"installed\" to be accessible to Python from anywhere. More on that at the end of the lesson.\n",
    "\n",
    "Let's import a module and find a function within it."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "3917f949",
   "metadata": {},
   "outputs": [],
   "source": [
    "# live code example\n",
    "import random"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "ef083f54",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<function Random.random()>"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "random.random"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "2a77a0ca",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8012558485047404"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "random.random()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a65f3554",
   "metadata": {},
   "source": [
    "## Importing code and handling namespaces\n",
    "There are several main ways to import a module. \n",
    "\n",
    "The most straightforward way is to just use `import <somepackage>` as we did above."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "76f3cfea",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<module 'math' from '/Users/mnfienen/miniforge3/envs/pyclass/lib/python3.11/lib-dynload/math.cpython-311-darwin.so'>"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import math\n",
    "math"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a5e8298b",
   "metadata": {},
   "source": [
    "This then shows that `numpy` is a module. Whenever you want to use a function from numpy, you just use the dot like `math.sqrt`.\n",
    "\n",
    "The main advantage to this approach is you always know the provenance of any function. Also, you could (bad idea!) make your own functions called `sqrt`. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "3869cf46",
   "metadata": {},
   "outputs": [],
   "source": [
    "def sqrt(numb):\n",
    "    # newton's method \n",
    "    def f(i0, numb):\n",
    "        return (i0 ** 2) - numb \n",
    "    \n",
    "    def f_prime(i0):\n",
    "        return 2 * i0\n",
    "    \n",
    "    err = 100000\n",
    "    i0 = 5\n",
    "    while err > 0.01:\n",
    "        i1 = i0 - f(i0, numb) / f_prime(i0)\n",
    "        err = abs(i1 - i0)\n",
    "        i0 = i1\n",
    "        \n",
    "    print (f'my complicated function estimates sqrt as--> {i1}!')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "8036d7bb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<function math.sqrt(x, /)>"
      ]
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# live code example\n",
    "math.sqrt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "4c3bbe5d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "my complicated function estimates sqrt as--> 2.2360688956433634!\n"
     ]
    }
   ],
   "source": [
    "sqrt(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "27ba4afb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2.23606797749979"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "math.sqrt(5)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9ecc1f89",
   "metadata": {},
   "source": [
    "Another option is to import only some function you need from a module like `from math import sqrt`. The problem here is, we don't necessarily know where this came from. Whichever was either imported or created most recently gets that name in the namespace. DANGER!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "30af8923",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<function math.sqrt(x, /)>"
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from math import sqrt\n",
    "sqrt"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d27c277e",
   "metadata": {},
   "source": [
    "You can also use an alias to import a specific function like `from math import sqrt as math_sqrt`. In this case, and in the case above, you can get the provenance from the import statements at the top of the code, but if the code gets really long, this can be hard to keep track of."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "cead1086",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<function math.sqrt(x, /)>"
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from math import sqrt as math_sqrt\n",
    "math_sqrt"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "750a627c",
   "metadata": {},
   "source": [
    "Living really dangerously, you can import all functions from a module like `from math import *`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "9b8f5cc7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(<function math.sqrt(x, /)>,\n",
       " <function math.log>,\n",
       " <function math.log10(x, /)>,\n",
       " <function math.floor(x, /)>,\n",
       " <function math.ceil(x, /)>)"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from math import *\n",
    "sqrt, log, log10, floor, ceil"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c3a55613",
   "metadata": {},
   "source": [
    "The problem here is, you now have access to all these functions, but you also don't know provenance at all. Some modules, like `numpy`, which will be covered later in this class, are large and have many functions (many of which may have common names that you might use yourself and that you might not be aware of).\n",
    "\n",
    "So.....really, the safest way is like the first way, but that can get long (for example, if you use `import matplotlib`, then every time you use a function from the module you have to type `matplotlib.<some function>` and that gets verbose. A compromise is importing an entire module but assigning it an alias like `import numpy as np`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "id": "36d33631",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1722398e",
   "metadata": {},
   "source": [
    "There is a commonly accepted set of aliases for some common scientific computing modules that we recommend: \n",
    "\n",
    "* `import matplotlib.pyplot as plt`\n",
    "* `import numpy as np`\n",
    "* `import matplotlib as mpl`\n",
    "* `import pandas as pd`\n",
    "\n",
    "In addition to keeping the provenance straight, adopting this protocol helps make your code more readable by other people. Remember the Zen of Python!!!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "26316c95",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The Zen of Python, by Tim Peters\n",
      "\n",
      "Beautiful is better than ugly.\n",
      "Explicit is better than implicit.\n",
      "Simple is better than complex.\n",
      "Complex is better than complicated.\n",
      "Flat is better than nested.\n",
      "Sparse is better than dense.\n",
      "Readability counts.\n",
      "Special cases aren't special enough to break the rules.\n",
      "Although practicality beats purity.\n",
      "Errors should never pass silently.\n",
      "Unless explicitly silenced.\n",
      "In the face of ambiguity, refuse the temptation to guess.\n",
      "There should be one-- and preferably only one --obvious way to do it.\n",
      "Although that way may not be obvious at first unless you're Dutch.\n",
      "Now is better than never.\n",
      "Although never is often better than *right* now.\n",
      "If the implementation is hard to explain, it's a bad idea.\n",
      "If the implementation is easy to explain, it may be a good idea.\n",
      "Namespaces are one honking great idea -- let's do more of those!\n"
     ]
    }
   ],
   "source": [
    "import this\n",
    "print(\"\".join([this.d.get(c, c) for c in this.s]))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0e519863",
   "metadata": {},
   "source": [
    "## Paths for importing and installation\n",
    "\n",
    "From the official [documentation](https://docs.python.org/3.9/tutorial/modules.html), the hierarchy of searching for modules and packages is:\n",
    "\n",
    "* the directory containing the input script (or the current directory).\n",
    "* PYTHONPATH (a list of directory names, with the same syntax as the shell variable PATH).\n",
    "* the installation-dependent default.\n",
    "\n",
    "The PYTHONPATH variable is a system variable on Windows and thus requires an administrative account to change/add to. You can see your search path using the built-in `sys` module."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "ea1f6fde",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['/Users/mnfienen/Documents/GIT/python-for-hydrology/notebooks/part0_python_intro/solutions',\n",
       " '/usr/local/condor/lib/python3',\n",
       " '/Users/mnfienen/miniforge3/envs/pyclass/lib/python311.zip',\n",
       " '/Users/mnfienen/miniforge3/envs/pyclass/lib/python3.11',\n",
       " '/Users/mnfienen/miniforge3/envs/pyclass/lib/python3.11/lib-dynload',\n",
       " '',\n",
       " '/Users/mnfienen/miniforge3/envs/pyclass/lib/python3.11/site-packages']"
      ]
     },
     "execution_count": 84,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import sys\n",
    "sys.path"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f1a11af7",
   "metadata": {},
   "source": [
    "## Exercise: putting it all together\n",
    "\n",
    "In this exercise we'll create our first module and import it into this notebook.\n",
    "\n",
    "Open the python file \"exercise_xx.py\" in an IDE or text file and create a class called `Circle`. Inputs to circle should be a radius and ID. Include in the `Circle` class a way to the calculate area and the circumference. After building the class, try importing into this notebook and using the it.\n",
    "\n",
    "**Bonus exercise:** Find a way to make the `Circle` objects divisible and compare the difference in area between a 12\" and 14\" pizza.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "id": "d11191c4",
   "metadata": {},
   "outputs": [],
   "source": [
    "from circle_module import Circle"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "id": "80a24c3b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.7346938775510204\n"
     ]
    }
   ],
   "source": [
    "med = Circle(12, 'medium')\n",
    "large = Circle(14, \"large\")\n",
    "\n",
    "print(med/large)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "50e9fe66",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "190b19b2",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3971e184",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
