{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 03: Solutions to Useful standard library modules exercises"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "from pathlib import Path\n",
    "import shutil\n",
    "import subprocess\n",
    "import sys\n",
    "import zipfile"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exercise: Make a script with a command line argument using sys.argv\n",
    "\n",
    "1) Using a text editor such as VSCode, make a new ``*.py`` file with the following contents:\n",
    "\n",
    "```python\n",
    "import sys\n",
    "\n",
    "if len(sys.argv) > 1:\n",
    "    for argument in sys.argv[1:]:\n",
    "        print(argument)\n",
    "else:\n",
    "    print(\"usage is: python <script name>.py argument\")\n",
    "    quit()\n",
    "```\n",
    "\n",
    "2) Try running the script at the command line"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "write_text = (\n",
    "    'import sys\\n\\n'\n",
    "    'if len(sys.argv) > 1:\\n'\n",
    "    '    for argument in sys.argv[1:]:\\n'\n",
    "    '        print(argument)\\n'\n",
    "    'else:\\n'\n",
    "    '   print(\"usage is: python <script name>.py argument\")\\n'\n",
    "    'quit()\\n'\n",
    ")\n",
    "\n",
    "with open('myscript.py', 'w') as dest:\n",
    "    dest.write(write_text)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "usage is: python <script name>.py argument\n"
     ]
    }
   ],
   "source": [
    "result = subprocess.run(['python', 'myscript.py'], check=True)\n",
    "result.stdout"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "arg1\n",
      "arg2\n"
     ]
    }
   ],
   "source": [
    "result = subprocess.run(['python', 'myscript.py', 'arg1', 'arg2'], check=True)\n",
    "result.stdout"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Testing Your Skills with a truly awful example:\n",
    "\n",
    "### the problem:\n",
    "Pretend that the file `data/fileio/netcdf_data.zip` contains some climate data (in the NetCDF format with the ``*.nc`` extension) that we downloaded. If you open `data/fileio/netcdf_data.zip`, you'll see that within a subfolder `zipped` are a bunch of additional subfolders, each for a different year. Within each subfolder is another zipfile. Within each of these zipfiles is yet another subfolder, inside of which is the actual data file we want (`prcp.nc`). "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "netcdf_data/\n",
      "netcdf_data/zipped/\n",
      "netcdf_data/zipped/zipped_1991/\n",
      "netcdf_data/zipped/zipped_1991/12270_1991.zip\n",
      "netcdf_data/zipped/zipped_1996/\n",
      "netcdf_data/zipped/zipped_1996/12270_1996.zip\n",
      "netcdf_data/zipped/zipped_1998/\n",
      "netcdf_data/zipped/zipped_1998/12270_1998.zip\n",
      "netcdf_data/zipped/zipped_1999/\n",
      "netcdf_data/zipped/zipped_1999/12270_1999.zip\n"
     ]
    }
   ],
   "source": [
    "with zipfile.ZipFile('../data/netcdf_data.zip') as src:\n",
    "    for f in src.namelist()[:10]:\n",
    "        print(f)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### the goal:\n",
    "To extract all of these `prcp.nc` files into a single folder, after renaming them with their respective years (obtained from their enclosing folders or zip files). e.g.  \n",
    "```\n",
    "prcp_1980.nc\n",
    "prcp_1981.nc\n",
    "...\n",
    "```\n",
    "This will allow us to open them together as a dataset in `xarray` (more on that later). Does this sound awful? I'm not making this up. This is the kind of structure you get when downloading tiles of climate data with the [Daymet Tile Selection Tool](https://daymet.ornl.gov/gridded/)\n",
    "\n",
    "### hint:\n",
    "you might find these functions helpful:\n",
    "```\n",
    "ZipFile.extractall\n",
    "ZipFile.extract\n",
    "Path.glob\n",
    "Path.mkdir\n",
    "Path.stem\n",
    "Path.parent\n",
    "Path.name\n",
    "shutil.move\n",
    "Path.rmdir()\n",
    "\n",
    "\n",
    "os.path.isdir\n",
    "os.makedirs\n",
    "\n",
    "os.path.split\n",
    "os.path.splitext\n",
    "os.path.join\n",
    "os.rename\n",
    "os.rmdir\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### hint: start by using ``ZipFile.extractall()`` to extract all of the individual zip files from the main zip archive\n",
    "This extracts the entire contents of the zip file to a designated folder"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "output_folder = Path('../03-output')\n",
    "output_folder.mkdir(exist_ok=True)\n",
    "\n",
    "with zipfile.ZipFile('../data/netcdf_data.zip') as src:\n",
    "    src.extractall(output_folder)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Make a list of the zipfiles"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[PosixPath('../03-output/netcdf_data/zipped/zipped_1991/12270_1991.zip'),\n",
       " PosixPath('../03-output/netcdf_data/zipped/zipped_1996/12270_1996.zip'),\n",
       " PosixPath('../03-output/netcdf_data/zipped/zipped_1998/12270_1998.zip'),\n",
       " PosixPath('../03-output/netcdf_data/zipped/zipped_1999/12270_1999.zip'),\n",
       " PosixPath('../03-output/netcdf_data/zipped/zipped_1997/12270_1997.zip')]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "zipfiles = list(output_folder.glob('netcdf_data/zipped/*/*.zip'))\n",
    "zipfiles[:5]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Part 1: extract with a single file"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "PosixPath('../03-output/netcdf_data/zipped/zipped_1991/12270_1991.zip')"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "f = zipfiles[0]\n",
    "f"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 1a) Use ``ZipFile.namelist()`` (as above) list the contents\n",
    "\n",
    "This will yield the name of the ``*.nc`` file that we need to extract"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "12270_1991/prcp.nc\n"
     ]
    }
   ],
   "source": [
    "with zipfile.ZipFile(f) as src:\n",
    "    nc_file = src.namelist()[0]\n",
    "print(nc_file)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 1b) Use ``ZipFile.extract()`` to extract the ``*.nc`` file to the destination folder\n",
    "(you may need to create the destination folder first)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "with zipfile.ZipFile(f) as src:\n",
    "    src.extract(nc_file, output_folder)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 1c) Move the extracted file out of any enclosing subfolders, and rename to ``prcp_<year>.nc``\n",
    "(so that if we repeat this for subsequent files, the extracted ``*.nc`` files will end up in the same place)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "PosixPath('../03-output/12270_1991/prcp.nc')"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# make a path for the extracted file\n",
    "extracted_path = output_folder / nc_file\n",
    "extracted_path"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "PosixPath('../03-output/prcp_1991.nc')"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# make a path for the new file\n",
    "nc_file = Path(nc_file)\n",
    "variable = nc_file.stem\n",
    "year = nc_file.parent.name.split('_')[1]\n",
    "new_file = output_folder / f\"{variable}_{year}.nc\"\n",
    "new_file"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "PosixPath('../03-output/prcp_1991.nc')"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# do the move\n",
    "shutil.move(extracted_path, new_file)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 1d) Remove the extra subfolders that were extracted"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "extracted_path.parent.rmdir()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Part 2: put the above steps together into a loop to repeat the workflow for all of the NetCDF files"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "../03-output/netcdf_data/zipped/zipped_1991/12270_1991.zip/12270_1991/prcp.nc --> ../03-output/prcp_1991.nc\n",
      "../03-output/netcdf_data/zipped/zipped_1996/12270_1996.zip/12270_1996/prcp.nc --> ../03-output/prcp_1996.nc\n",
      "../03-output/netcdf_data/zipped/zipped_1998/12270_1998.zip/12270_1998/prcp.nc --> ../03-output/prcp_1998.nc\n",
      "../03-output/netcdf_data/zipped/zipped_1999/12270_1999.zip/12270_1999/prcp.nc --> ../03-output/prcp_1999.nc\n",
      "../03-output/netcdf_data/zipped/zipped_1997/12270_1997.zip/12270_1997/prcp.nc --> ../03-output/prcp_1997.nc\n",
      "../03-output/netcdf_data/zipped/zipped_1990/12270_1990.zip/12270_1990/prcp.nc --> ../03-output/prcp_1990.nc\n",
      "../03-output/netcdf_data/zipped/zipped_2003/12270_2003.zip/12270_2003/prcp.nc --> ../03-output/prcp_2003.nc\n",
      "../03-output/netcdf_data/zipped/zipped_2004/12270_2004.zip/12270_2004/prcp.nc --> ../03-output/prcp_2004.nc\n",
      "../03-output/netcdf_data/zipped/zipped_2005/12270_2005.zip/12270_2005/prcp.nc --> ../03-output/prcp_2005.nc\n",
      "../03-output/netcdf_data/zipped/zipped_2002/12270_2002.zip/12270_2002/prcp.nc --> ../03-output/prcp_2002.nc\n",
      "../03-output/netcdf_data/zipped/zipped_2011/12270_2011.zip/12270_2011/prcp.nc --> ../03-output/prcp_2011.nc\n",
      "../03-output/netcdf_data/zipped/zipped_2016/12270_2016.zip/12270_2016/prcp.nc --> ../03-output/prcp_2016.nc\n",
      "../03-output/netcdf_data/zipped/zipped_2017/12270_2017.zip/12270_2017/prcp.nc --> ../03-output/prcp_2017.nc\n",
      "../03-output/netcdf_data/zipped/zipped_2010/12270_2010.zip/12270_2010/prcp.nc --> ../03-output/prcp_2010.nc\n",
      "../03-output/netcdf_data/zipped/zipped_1983/12270_1983.zip/12270_1983/prcp.nc --> ../03-output/prcp_1983.nc\n",
      "../03-output/netcdf_data/zipped/zipped_1984/12270_1984.zip/12270_1984/prcp.nc --> ../03-output/prcp_1984.nc\n",
      "../03-output/netcdf_data/zipped/zipped_1985/12270_1985.zip/12270_1985/prcp.nc --> ../03-output/prcp_1985.nc\n",
      "../03-output/netcdf_data/zipped/zipped_1982/12270_1982.zip/12270_1982/prcp.nc --> ../03-output/prcp_1982.nc\n",
      "../03-output/netcdf_data/zipped/zipped_1995/12270_1995.zip/12270_1995/prcp.nc --> ../03-output/prcp_1995.nc\n",
      "../03-output/netcdf_data/zipped/zipped_1992/12270_1992.zip/12270_1992/prcp.nc --> ../03-output/prcp_1992.nc\n",
      "../03-output/netcdf_data/zipped/zipped_1993/12270_1993.zip/12270_1993/prcp.nc --> ../03-output/prcp_1993.nc\n",
      "../03-output/netcdf_data/zipped/zipped_1994/12270_1994.zip/12270_1994/prcp.nc --> ../03-output/prcp_1994.nc\n",
      "../03-output/netcdf_data/zipped/zipped_2009/12270_2009.zip/12270_2009/prcp.nc --> ../03-output/prcp_2009.nc\n",
      "../03-output/netcdf_data/zipped/zipped_2007/12270_2007.zip/12270_2007/prcp.nc --> ../03-output/prcp_2007.nc\n",
      "../03-output/netcdf_data/zipped/zipped_2000/12270_2000.zip/12270_2000/prcp.nc --> ../03-output/prcp_2000.nc\n",
      "../03-output/netcdf_data/zipped/zipped_2001/12270_2001.zip/12270_2001/prcp.nc --> ../03-output/prcp_2001.nc\n",
      "../03-output/netcdf_data/zipped/zipped_2006/12270_2006.zip/12270_2006/prcp.nc --> ../03-output/prcp_2006.nc\n",
      "../03-output/netcdf_data/zipped/zipped_2008/12270_2008.zip/12270_2008/prcp.nc --> ../03-output/prcp_2008.nc\n",
      "../03-output/netcdf_data/zipped/zipped_2015/12270_2015.zip/12270_2015/prcp.nc --> ../03-output/prcp_2015.nc\n",
      "../03-output/netcdf_data/zipped/zipped_2012/12270_2012.zip/12270_2012/prcp.nc --> ../03-output/prcp_2012.nc\n",
      "../03-output/netcdf_data/zipped/zipped_2013/12270_2013.zip/12270_2013/prcp.nc --> ../03-output/prcp_2013.nc\n",
      "../03-output/netcdf_data/zipped/zipped_2014/12270_2014.zip/12270_2014/prcp.nc --> ../03-output/prcp_2014.nc\n",
      "../03-output/netcdf_data/zipped/zipped_1989/12270_1989.zip/12270_1989/prcp.nc --> ../03-output/prcp_1989.nc\n",
      "../03-output/netcdf_data/zipped/zipped_1987/12270_1987.zip/12270_1987/prcp.nc --> ../03-output/prcp_1987.nc\n",
      "../03-output/netcdf_data/zipped/zipped_1980/12270_1980.zip/12270_1980/prcp.nc --> ../03-output/prcp_1980.nc\n",
      "../03-output/netcdf_data/zipped/zipped_1981/12270_1981.zip/12270_1981/prcp.nc --> ../03-output/prcp_1981.nc\n",
      "../03-output/netcdf_data/zipped/zipped_1986/12270_1986.zip/12270_1986/prcp.nc --> ../03-output/prcp_1986.nc\n",
      "../03-output/netcdf_data/zipped/zipped_1988/12270_1988.zip/12270_1988/prcp.nc --> ../03-output/prcp_1988.nc\n"
     ]
    }
   ],
   "source": [
    "for f in zipfiles:\n",
    "    with zipfile.ZipFile(f) as src:\n",
    "        \n",
    "        # get the NetCDF file\n",
    "        nc_file = src.namelist()[0]\n",
    "        \n",
    "        # extract it to the output folder\n",
    "        src.extract(nc_file, output_folder)\n",
    "        \n",
    "        # make a path for the extracted file\n",
    "        extracted_path = output_folder / nc_file\n",
    "        \n",
    "        # make a path for the new file\n",
    "        nc_file = Path(nc_file)\n",
    "        variable = nc_file.stem\n",
    "        year = nc_file.parent.name.split('_')[1]\n",
    "        new_file = output_folder / f\"{variable}_{year}.nc\"\n",
    "        \n",
    "        # move the extracted NetCDF file to the dest. location\n",
    "        shutil.move(extracted_path, new_file)\n",
    "        \n",
    "        # remove the subfolders that were extracted\n",
    "        extracted_path.parent.rmdir()\n",
    "        \n",
    "        print(f\"{f}/{nc_file} --> {new_file}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Another way to do this using ``os`` instead of ``pathlib``\n",
    "(from the 2018 Madison Python class)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "../03-output/netcdf_data/zipped/zipped_1991/12270_1991.zip/12270_1991/prcp.nc --> extracted_data/prcp_1991.nc\n",
      "../03-output/netcdf_data/zipped/zipped_1996/12270_1996.zip/12270_1996/prcp.nc --> extracted_data/prcp_1996.nc\n",
      "../03-output/netcdf_data/zipped/zipped_1998/12270_1998.zip/12270_1998/prcp.nc --> extracted_data/prcp_1998.nc\n",
      "../03-output/netcdf_data/zipped/zipped_1999/12270_1999.zip/12270_1999/prcp.nc --> extracted_data/prcp_1999.nc\n",
      "../03-output/netcdf_data/zipped/zipped_1997/12270_1997.zip/12270_1997/prcp.nc --> extracted_data/prcp_1997.nc\n",
      "../03-output/netcdf_data/zipped/zipped_1990/12270_1990.zip/12270_1990/prcp.nc --> extracted_data/prcp_1990.nc\n",
      "../03-output/netcdf_data/zipped/zipped_2003/12270_2003.zip/12270_2003/prcp.nc --> extracted_data/prcp_2003.nc\n",
      "../03-output/netcdf_data/zipped/zipped_2004/12270_2004.zip/12270_2004/prcp.nc --> extracted_data/prcp_2004.nc\n",
      "../03-output/netcdf_data/zipped/zipped_2005/12270_2005.zip/12270_2005/prcp.nc --> extracted_data/prcp_2005.nc\n",
      "../03-output/netcdf_data/zipped/zipped_2002/12270_2002.zip/12270_2002/prcp.nc --> extracted_data/prcp_2002.nc\n",
      "../03-output/netcdf_data/zipped/zipped_2011/12270_2011.zip/12270_2011/prcp.nc --> extracted_data/prcp_2011.nc\n",
      "../03-output/netcdf_data/zipped/zipped_2016/12270_2016.zip/12270_2016/prcp.nc --> extracted_data/prcp_2016.nc\n",
      "../03-output/netcdf_data/zipped/zipped_2017/12270_2017.zip/12270_2017/prcp.nc --> extracted_data/prcp_2017.nc\n",
      "../03-output/netcdf_data/zipped/zipped_2010/12270_2010.zip/12270_2010/prcp.nc --> extracted_data/prcp_2010.nc\n",
      "../03-output/netcdf_data/zipped/zipped_1983/12270_1983.zip/12270_1983/prcp.nc --> extracted_data/prcp_1983.nc\n",
      "../03-output/netcdf_data/zipped/zipped_1984/12270_1984.zip/12270_1984/prcp.nc --> extracted_data/prcp_1984.nc\n",
      "../03-output/netcdf_data/zipped/zipped_1985/12270_1985.zip/12270_1985/prcp.nc --> extracted_data/prcp_1985.nc\n",
      "../03-output/netcdf_data/zipped/zipped_1982/12270_1982.zip/12270_1982/prcp.nc --> extracted_data/prcp_1982.nc\n",
      "../03-output/netcdf_data/zipped/zipped_1995/12270_1995.zip/12270_1995/prcp.nc --> extracted_data/prcp_1995.nc\n",
      "../03-output/netcdf_data/zipped/zipped_1992/12270_1992.zip/12270_1992/prcp.nc --> extracted_data/prcp_1992.nc\n",
      "../03-output/netcdf_data/zipped/zipped_1993/12270_1993.zip/12270_1993/prcp.nc --> extracted_data/prcp_1993.nc\n",
      "../03-output/netcdf_data/zipped/zipped_1994/12270_1994.zip/12270_1994/prcp.nc --> extracted_data/prcp_1994.nc\n",
      "../03-output/netcdf_data/zipped/zipped_2009/12270_2009.zip/12270_2009/prcp.nc --> extracted_data/prcp_2009.nc\n",
      "../03-output/netcdf_data/zipped/zipped_2007/12270_2007.zip/12270_2007/prcp.nc --> extracted_data/prcp_2007.nc\n",
      "../03-output/netcdf_data/zipped/zipped_2000/12270_2000.zip/12270_2000/prcp.nc --> extracted_data/prcp_2000.nc\n",
      "../03-output/netcdf_data/zipped/zipped_2001/12270_2001.zip/12270_2001/prcp.nc --> extracted_data/prcp_2001.nc\n",
      "../03-output/netcdf_data/zipped/zipped_2006/12270_2006.zip/12270_2006/prcp.nc --> extracted_data/prcp_2006.nc\n",
      "../03-output/netcdf_data/zipped/zipped_2008/12270_2008.zip/12270_2008/prcp.nc --> extracted_data/prcp_2008.nc\n",
      "../03-output/netcdf_data/zipped/zipped_2015/12270_2015.zip/12270_2015/prcp.nc --> extracted_data/prcp_2015.nc\n",
      "../03-output/netcdf_data/zipped/zipped_2012/12270_2012.zip/12270_2012/prcp.nc --> extracted_data/prcp_2012.nc\n",
      "../03-output/netcdf_data/zipped/zipped_2013/12270_2013.zip/12270_2013/prcp.nc --> extracted_data/prcp_2013.nc\n",
      "../03-output/netcdf_data/zipped/zipped_2014/12270_2014.zip/12270_2014/prcp.nc --> extracted_data/prcp_2014.nc\n",
      "../03-output/netcdf_data/zipped/zipped_1989/12270_1989.zip/12270_1989/prcp.nc --> extracted_data/prcp_1989.nc\n",
      "../03-output/netcdf_data/zipped/zipped_1987/12270_1987.zip/12270_1987/prcp.nc --> extracted_data/prcp_1987.nc\n",
      "../03-output/netcdf_data/zipped/zipped_1980/12270_1980.zip/12270_1980/prcp.nc --> extracted_data/prcp_1980.nc\n",
      "../03-output/netcdf_data/zipped/zipped_1981/12270_1981.zip/12270_1981/prcp.nc --> extracted_data/prcp_1981.nc\n",
      "../03-output/netcdf_data/zipped/zipped_1986/12270_1986.zip/12270_1986/prcp.nc --> extracted_data/prcp_1986.nc\n",
      "../03-output/netcdf_data/zipped/zipped_1988/12270_1988.zip/12270_1988/prcp.nc --> extracted_data/prcp_1988.nc\n"
     ]
    }
   ],
   "source": [
    "# declare a destination path\n",
    "dest_path = 'extracted_data'\n",
    "variable = 'prcp'\n",
    "\n",
    "for f in zipfiles:\n",
    "    with zipfile.ZipFile(f) as src:\n",
    "        # get the path to the source file and the year\n",
    "        _, fname = os.path.split(f)\n",
    "        name = os.path.splitext(fname)[0].replace('.tar', '')\n",
    "        srcfile = '{}/{}.nc'.format(name, variable)\n",
    "        year = name.split('_')[1]\n",
    "\n",
    "        # where we want the extracted .nc file to end up\n",
    "        destfile = os.path.join(dest_path, '{}_{}.nc'.format(variable, year))\n",
    "\n",
    "        # extract the srcfile path to the /daymet folder\n",
    "        # unfortunately this extracts the whole path, not just the file\n",
    "        src.extract(srcfile, dest_path)\n",
    "        # move the file up from subfolders to /daymet\n",
    "        shutil.move(os.path.join(dest_path, srcfile), dest_path)\n",
    "        # rename to include year\n",
    "        os.rename(os.path.join(dest_path, '{}.nc'.format(variable)),\n",
    "                  destfile)\n",
    "        # trash subfolders that were extracted\n",
    "        os.rmdir(os.path.join(dest_path, name))\n",
    "        print('{}/{} --> {}'.format(f, srcfile, destfile))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
