# starting version number for the project (optional)
# version reported by modflow-setup will then be
# the start_version appended by the remaining information
# in a pep440-post style version tag
# (e.g. most recent git commit hash for the model repository
# + "dirty" if the model repository has uncommitted changes)
# see https://github.com/warner/python-versioneer/blob/master/details.md
metadata:
  start_version: 0.1
  longname: 'Pleasant Lake test case'

# input for MODFLOW 6 simulation
simulation:
  sim_name: 'pleasant-inset'
  version: 'mf6'
  sim_ws: 'pleasant-inset/'

# input for MODFLOW 6 model
model:
  simulation: 'pleasant-inset'
  modelname: 'pleasant-inset'
  options:
    print_input: True
    save_flows: True
    newton: True
    newton_under_relaxation: True
  # packages to build
  # (any packages not listed or commented out will not be built,
  #  event if they have an input block below)
  packages: ['dis',
             'ic',
             'npf',
             'oc',
             'sto',
             # Note: with no recharge block below and default_source_data=True, 
             # recharge is regridded from parent model
             'rch', 
             'sfr',
             'lak',
             'obs',
             'wel',
             'ims',
             'chd'
  ]

# Regional model to extract boundary conditions, property arrays, and pumping data from
parent:
  # arguments to flopy.modflow.Modflow.load for parent model
  namefile: 'pleasant.nam'
  model_ws: 'pleasant-lake/'
  version: 'mf6'
  # modflow-setup options
  # default_source_data: True, packages and variables that are omitted 
  # will be pulled from the parent model
  default_source_data: True  
  copy_stress_periods: 'all'
  inset_layer_mapping:  # mapping between inset and parent model layers
    0: 0  # inset: parent  (inset layers 1 and 0 copied from parent layer 0)
    1: 0
    2: 1
    3: 2
    4: 3
  start_date_time: '2012-01-01'
  length_units: 'meters'
  time_units: 'days'
  SpatialReference:
    xoff: 552400
    yoff: 387200
    epsg: 3070

# parameters for setting up the horizontal configuration of the grid
setup_grid:
  xoff: 553200 # lower left x-coordinate
  yoff: 387800 # lower left y-coordinate
  rotation: 0.
  dxy: 50  # uniform cell spacing, in CRS units of meters
  crs: 3070  # Coordinate reference system (Wisconsin Transverse Mercator)

# Structured Discretization Package
dis:
  options:
    length_units: 'meters'
  dimensions:
    nlay: 5
    nrow: 100
    ncol: 108
  source_data:
    top:
      # DEM file; path relative to setup script
      filename: 'pleasant-lake/source_data/rasters/dem40m.tif'
      elevation_units: 'meters'
    botm:
      filenames:  # preprocessed layer surfaces
        1: 'pleasant-lake/source_data/rasters/botm0.tif'
        2: 'pleasant-lake/source_data/rasters/botm1.tif'
        3: 'pleasant-lake/source_data/rasters/botm2.tif'
        4: 'pleasant-lake/source_data/rasters/botm3.tif'

# Temporal Discretization Package
tdis:
  options:
    time_units: 'days'
    start_date_time: '2012-01-01'
  perioddata:
    # time discretization info can be specified directly under the perioddata key
    # or in groups of stress periods that are discretized in a similar way
    group 1: # initial steady-state period (steady specified under sto package)
      #perlen: 1 # Specify perlen as an int or list of lengths in model units, 
      # or perlen=None and 3 of start_date, end_date, nper and/or freq."
      nper: 1
      nstp: 1
      tsmult: 1
      # "steady" can be entered here; 
      # otherwise the global entry specified in the STO package is used as the default
      steady: True  
      # oc_saverecord: can also be specified by group here; 
      # otherwise the global entry specified in the oc package is used as the default
    group 2: # monthly stress periods
      # can be specified by group, 
      # otherwise start_date_time for the model (under tdis: options) will be used.
      start_date_time: '2012-01-01'  
      # model ends at midnight on this date (2012-12-31 would be the last day simulated)
      end_date_time: '2013-01-01'
      freq: '1MS'  # see arguments to pandas.date_range
      nstp: 1
      tsmult: 1.5
      steady: False

# Initial Conditions Package
ic:
  source_data:
    strt:
      from_parent:   # starting heads sampled from parent model
        binaryfile: 'pleasant-lake/pleasant.hds'
        stress_period: 0

# Node Property Flow Package
npf:
  options:
    save_flows: True
  griddata:
    icelltype: 1 # variable sat. thickness in all layers
  # with parent: default_source_data: True,
  # unspecified variables such as "k" and "k33" are resampled from parent model

# Storage Package
sto:
  options:
    save_flows: True
  griddata:
    iconvert: 1  # convertible layers
  # with parent: default_source_data: True,
  # unspecified variables such as "sy" and "ss" are resampled from parent model

# Well Package
wel:
  options:
    print_input: True
    print_flows: True
    save_flows: True
  # with parent: default_source_data: True,
  # unspecified well fluxes are resampled from parent model

# Streamflow Routing Package
# SFR input is created using SFRmaker (https://github.com/doi-usgs/sfrmaker)
sfr:
  options:
    save_flows: True
  source_data:
    flowlines:
      # path to NHDPlus version 2 dataset
      nhdplus_paths: ['pleasant-lake/source_data/shps']
    # if a DEM is included, streambed top elevations will be sampled
    # from the minimum DEM values within a 100 meter buffer around each stream reach
    dem:
      filename: 'pleasant-lake/source_data/rasters/dem40m.tif'
      elevation_units: 'meters'
    # SFR observations can be automatically setup from a CSV file
    # of x, y locations and fluxes
    observations:  # see sfrmaker.observations.add_observations for arguments
      filename: 'pleasant-lake/source_data/tables/gages.csv'
      obstype: 'downstream-flow'  # modflow-6 observation type
      x_location_column: 'x'
      y_location_column: 'y'
      obsname_column: 'site_no'
  sfrmaker_options:
    # the sfrmaker_options: block can include arguments 
    # to the Lines.to_sfr method in SFRmaker 
    # or other options such as set_streambed_top_elevations_from_dem
    # or to_riv (see SFRmaker and Modflow-setup docs)
    set_streambed_top_elevations_from_dem: True

# Lake Package
lak:
  options:
    boundnames: True
    save_flows: True
    surfdep: 0.1  
  source_data:
    # initial lakebed leakance rates
    littoral_leakance: 0.045 # for thin zone around lake perimeter; 1/d
    profundal_leakance: 0.025 # for interior of lake basin; 1/d
    littoral_zone_buffer_width: 40
    lakes_shapefile:  # polygon shapefile of lake footprints
      filename: 'pleasant-lake/source_data/shps/all_lakes.shp'
      id_column: 'HYDROID'
      include_ids: [600059060] # pleasant lake
    # setup lake precipitation and evaporation from PRISM data
    climate:
      filenames:
        600059060: 'pleasant-lake/source_data/PRISM_ppt_tmean_stable_4km_189501_201901_43.9850_-89.5522.csv'
      format: 'prism'
      period_stats:
        # for period 0, use average precip and evap for dates below
        0: ['mean', '2012-01-01', '2018-12-31']  # average daily rate for model period for initial steady state
        # for subsequent periods,
        # average precip and evap to period start/end dates
        1: 'mean'  # average daily rate or value for each month
    # bathymetry file with lake depths to subtract off model top
    bathymetry_raster:
      filename: 'pleasant-lake/source_data/rasters/pleasant_bathymetry.tif'
      length_units: 'meters'
    # bathymetry file with stage/area/volume relationship
    stage_area_volume_file:
      filename: 'pleasant-lake/source_data/tables/area_stage_vol_Pleasant.csv'
      length_units: 'meters'
      id_column: 'hydroid'
      column_mappings:
        volume_m3: 'volume'
  external_files: False  # option to write connectiondata table to external file

# Iterative model solution
ims:
  options:
    complexity: 'complex'
  nonlinear:
    outer_dvclose: 1.e-1
    outer_maximum: 200

# Observation (OBS) Utility
obs:
  source_data:
    # Head observations are supplied via csv files 
    # with x, y locations and observation names
    # an observation is generated in each model layer;
    # observations at each location can subsequently be processed
    # to represent a given screened interval
    # for example, using modflow-obs (https://github.com/aleaf/modflow-obs)
    filenames: ['pleasant-lake/source_data/tables/nwis_heads_info_file.csv',
                'pleasant-lake/source_data/tables/lake_sites.csv',
                'pleasant-lake/source_data/tables/wdnr_gw_sites.csv',
                'pleasant-lake/source_data/tables/uwsp_heads.csv',
                'pleasant-lake/source_data/tables/wgnhs_head_targets.csv'
                     ]
    column_mappings:
      obsname: ['obsprefix', 'obsnme', 'common_name']
  drop_observations: ['10019209_lk'  # pleasant lake; monitored via Lake Package observations
  ]

# Perimeter boundary condition of heads extracted from parent model solution
chd:
  perimeter_boundary:
    parent_head_file: 'pleasant-lake/pleasant.hds'
